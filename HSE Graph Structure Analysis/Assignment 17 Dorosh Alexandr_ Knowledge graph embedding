{"cells":[{"cell_type":"markdown","id":"54afd6cf","metadata":{"id":"54afd6cf"},"source":["# Assignment — Knowledge graph embedding"]},{"cell_type":"code","execution_count":null,"id":"88c85b0e","metadata":{"id":"88c85b0e"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from zlib import adler32\n","from tqdm.notebook import tqdm, trange\n","pd.options.display.max_colwidth = 100\n","import requests"]},{"cell_type":"markdown","id":"1e432975","metadata":{"id":"1e432975"},"source":["### Task 1. Freebase dataset (0.0 points)"]},{"cell_type":"markdown","id":"f6478877","metadata":{"id":"f6478877"},"source":["In this assignment we will see how to use the [TorchKGE](https://github.com/torchkge-team/torchkge) library for building knowledge graphs and its embeddings. To begin with we are going to need a knowledge graph, so let us load a standard knowledge graph dataset called _Freebase-15k-237_."]},{"cell_type":"code","execution_count":null,"id":"facb26f6","metadata":{"id":"facb26f6"},"outputs":[],"source":["df = pd.read_csv(\n","    \"https://raw.githubusercontent.com/netspractice/network-science/main/datasets/freebase-237-merged-and-remapped.csv.gz\",\n","    names=['h', 'r', 't'])"]},{"cell_type":"code","execution_count":null,"id":"1d9db44d","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":397},"executionInfo":{"elapsed":815,"status":"ok","timestamp":1749631211219,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"1d9db44d","outputId":"f3ef7879-406d-44e3-efc9-9d8ce750e4c1"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df[::1000]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"the perks of being a wallflower\",\n          \"sharon stone\",\n          \"alice in wonderland\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"/film/film/country\",\n          \"/award/award_nominee/award_nominations./award/award_nomination/award_nominee\",\n          \"/location/country/official_language\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"united states of america\",\n          \"jacob vargas\",\n          \"english language\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-b0ff6c29-8280-427e-a100-a0331612bf5b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>queens college, city university of new york</td>\n","      <td>/education/educational_institution/students_graduates./education/education/student</td>\n","      <td>carol leifer</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>sharon stone</td>\n","      <td>/award/award_nominee/award_nominations./award/award_nomination/award_nominee</td>\n","      <td>jacob vargas</td>\n","    </tr>\n","    <tr>\n","      <th>2210</th>\n","      <td>japan</td>\n","      <td>/location/country/capital</td>\n","      <td>tokyo</td>\n","    </tr>\n","    <tr>\n","      <th>3329</th>\n","      <td>syphilis</td>\n","      <td>/medicine/disease/risk_factors</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>4447</th>\n","      <td>michael carlisle hall</td>\n","      <td>/award/award_nominee/award_nominations./award/award_nomination/award_nominee</td>\n","      <td>mena suvari</td>\n","    </tr>\n","    <tr>\n","      <th>5555</th>\n","      <td>alice in wonderland</td>\n","      <td>/film/film/language</td>\n","      <td>english language</td>\n","    </tr>\n","    <tr>\n","      <th>6653</th>\n","      <td>nauru</td>\n","      <td>/location/country/official_language</td>\n","      <td>english language</td>\n","    </tr>\n","    <tr>\n","      <th>7743</th>\n","      <td>ben harper</td>\n","      <td>/people/person/spouse_s./people/marriage/type_of_union</td>\n","      <td>marriage</td>\n","    </tr>\n","    <tr>\n","      <th>8840</th>\n","      <td>the perks of being a wallflower</td>\n","      <td>/film/film/country</td>\n","      <td>united states of america</td>\n","    </tr>\n","    <tr>\n","      <th>9960</th>\n","      <td>vice president</td>\n","      <td>/business/job_title/people_with_this_title./business/employment_tenure/company</td>\n","      <td>scripps howard broadcasting</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0ff6c29-8280-427e-a100-a0331612bf5b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b0ff6c29-8280-427e-a100-a0331612bf5b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b0ff6c29-8280-427e-a100-a0331612bf5b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0d45ce78-ea99-4028-b8e1-c250f8082d12\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d45ce78-ea99-4028-b8e1-c250f8082d12')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0d45ce78-ea99-4028-b8e1-c250f8082d12 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"text/plain":["                                                h  \\\n","0     queens college, city university of new york   \n","1103                                 sharon stone   \n","2210                                        japan   \n","3329                                     syphilis   \n","4447                        michael carlisle hall   \n","5555                          alice in wonderland   \n","6653                                        nauru   \n","7743                                   ben harper   \n","8840              the perks of being a wallflower   \n","9960                               vice president   \n","\n","                                                                                       r  \\\n","0     /education/educational_institution/students_graduates./education/education/student   \n","1103        /award/award_nominee/award_nominations./award/award_nomination/award_nominee   \n","2210                                                           /location/country/capital   \n","3329                                                      /medicine/disease/risk_factors   \n","4447        /award/award_nominee/award_nominations./award/award_nomination/award_nominee   \n","5555                                                                 /film/film/language   \n","6653                                                 /location/country/official_language   \n","7743                              /people/person/spouse_s./people/marriage/type_of_union   \n","8840                                                                  /film/film/country   \n","9960      /business/job_title/people_with_this_title./business/employment_tenure/company   \n","\n","                                t  \n","0                    carol leifer  \n","1103                 jacob vargas  \n","2210                        tokyo  \n","3329                         male  \n","4447                  mena suvari  \n","5555             english language  \n","6653             english language  \n","7743                     marriage  \n","8840     united states of america  \n","9960  scripps howard broadcasting  "]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["df = df[~df.h.str.startswith('/') & ~df.t.str.startswith('/')]\n","df[::1000].head(10)"]},{"cell_type":"markdown","id":"1c6aaa64","metadata":{"id":"1c6aaa64"},"source":["There is h — head (also subject), r — relation (also predicat, label), t — tail (also object). The shape of the dataset is"]},{"cell_type":"code","execution_count":null,"id":"a6f31676","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1749631211268,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"a6f31676","outputId":"0de98744-fae7-4169-f055-8a173e99ecc8"},"outputs":[{"data":{"text/plain":["(282560, 3)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["df.shape"]},{"cell_type":"markdown","id":"b3f19608","metadata":{"id":"b3f19608"},"source":["Let us check the number of unique entities and unique relations.\n","\n","Write a funtion `n_ent_rel` that takes a dataset and returns a number of unique entities and unique relations.\n"]},{"cell_type":"code","execution_count":null,"id":"4d3ccfb7","metadata":{"id":"4d3ccfb7"},"outputs":[],"source":["def n_ent_rel(df):\n","    n_ent = len(set(df['h']).union(set(df['t'])))\n","    n_rel = df['r'].nunique()\n","    return n_ent, n_rel"]},{"cell_type":"code","execution_count":null,"id":"e185c183","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":246,"status":"ok","timestamp":1749631211591,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"e185c183","outputId":"f87a68b9-d44c-4bbc-b9dc-e0662b27398c"},"outputs":[{"data":{"text/plain":["(13506, 228)"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["n_ent, n_rel = n_ent_rel(df)\n","assert adler32(str(n_ent + n_ent).encode()) == 50266365\n","n_ent, n_rel"]},{"cell_type":"markdown","id":"cae14cdb","metadata":{"id":"cae14cdb"},"source":["We can look at all facts about any entity via pandas API"]},{"cell_type":"code","execution_count":null,"id":"71697bdd","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":210,"status":"ok","timestamp":1749631211750,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"71697bdd","outputId":"97452afb-73a2-45b7-9e95-3e05ba3fe44a"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df[df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"aleksandr pushkin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"/influence/influence_node/influenced_by\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"johann wolfgang von goethe\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-4ec43ab7-5a79-45ba-9130-35159bec96e4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4107</th>\n","      <td>aleksandr pushkin</td>\n","      <td>/people/person/profession</td>\n","      <td>poet</td>\n","    </tr>\n","    <tr>\n","      <th>14992</th>\n","      <td>aleksandr pushkin</td>\n","      <td>/influence/influence_node/influenced_by</td>\n","      <td>johann wolfgang von goethe</td>\n","    </tr>\n","    <tr>\n","      <th>19525</th>\n","      <td>aleksandr pushkin</td>\n","      <td>/people/person/nationality</td>\n","      <td>russian empire</td>\n","    </tr>\n","    <tr>\n","      <th>40237</th>\n","      <td>aleksandr pushkin</td>\n","      <td>/people/person/place_of_birth</td>\n","      <td>moscow</td>\n","    </tr>\n","    <tr>\n","      <th>47411</th>\n","      <td>aleksandr pushkin</td>\n","      <td>/influence/influence_node/influenced_by</td>\n","      <td>william shakespeare</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ec43ab7-5a79-45ba-9130-35159bec96e4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4ec43ab7-5a79-45ba-9130-35159bec96e4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4ec43ab7-5a79-45ba-9130-35159bec96e4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-f78675be-6dd9-4125-bec4-7ccd05f02f72\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f78675be-6dd9-4125-bec4-7ccd05f02f72')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-f78675be-6dd9-4125-bec4-7ccd05f02f72 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"text/plain":["                       h                                        r  \\\n","4107   aleksandr pushkin                /people/person/profession   \n","14992  aleksandr pushkin  /influence/influence_node/influenced_by   \n","19525  aleksandr pushkin               /people/person/nationality   \n","40237  aleksandr pushkin            /people/person/place_of_birth   \n","47411  aleksandr pushkin  /influence/influence_node/influenced_by   \n","\n","                                t  \n","4107                         poet  \n","14992  johann wolfgang von goethe  \n","19525              russian empire  \n","40237                      moscow  \n","47411         william shakespeare  "]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["df[df.h ==  'aleksandr pushkin'].head()"]},{"cell_type":"code","execution_count":null,"id":"a9d4f918","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"elapsed":185,"status":"ok","timestamp":1749631211927,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"a9d4f918","outputId":"b699e79f-191f-4d1f-d336-14a9eeeb7b45"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df[(df\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"aleksandr pushkin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"/influence/influence_node/peers./influence/peer_relationship/peers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"nikolai gogol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-37b304e1-28e8-4dc4-8572-e48c76b254ba\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>145219</th>\n","      <td>aleksandr pushkin</td>\n","      <td>/influence/influence_node/peers./influence/peer_relationship/peers</td>\n","      <td>nikolai gogol</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37b304e1-28e8-4dc4-8572-e48c76b254ba')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-37b304e1-28e8-4dc4-8572-e48c76b254ba button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-37b304e1-28e8-4dc4-8572-e48c76b254ba');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["                        h  \\\n","145219  aleksandr pushkin   \n","\n","                                                                         r  \\\n","145219  /influence/influence_node/peers./influence/peer_relationship/peers   \n","\n","                    t  \n","145219  nikolai gogol  "]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["df[(df.h ==  'aleksandr pushkin') & (df.t == 'nikolai gogol')]"]},{"cell_type":"code","execution_count":null,"id":"7fb63604","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"elapsed":166,"status":"ok","timestamp":1749631212163,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"7fb63604","outputId":"d012b72f-d96d-4f6a-c5b7-54e19c7b9f12"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df[(df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"nikolai gogol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"/influence/influence_node/influenced_by\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"aleksandr pushkin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-06a41145-651a-44ac-9379-b1406bd8ec34\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>86362</th>\n","      <td>nikolai gogol</td>\n","      <td>/influence/influence_node/peers./influence/peer_relationship/peers</td>\n","      <td>aleksandr pushkin</td>\n","    </tr>\n","    <tr>\n","      <th>269512</th>\n","      <td>nikolai gogol</td>\n","      <td>/influence/influence_node/influenced_by</td>\n","      <td>aleksandr pushkin</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06a41145-651a-44ac-9379-b1406bd8ec34')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-06a41145-651a-44ac-9379-b1406bd8ec34 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-06a41145-651a-44ac-9379-b1406bd8ec34');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-58f19540-860a-4865-804c-ec2ecaa3f917\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58f19540-860a-4865-804c-ec2ecaa3f917')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-58f19540-860a-4865-804c-ec2ecaa3f917 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"text/plain":["                    h  \\\n","86362   nikolai gogol   \n","269512  nikolai gogol   \n","\n","                                                                         r  \\\n","86362   /influence/influence_node/peers./influence/peer_relationship/peers   \n","269512                             /influence/influence_node/influenced_by   \n","\n","                        t  \n","86362   aleksandr pushkin  \n","269512  aleksandr pushkin  "]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["df[(df.h ==  'nikolai gogol') & (df.t == 'aleksandr pushkin')]"]},{"cell_type":"markdown","id":"dc9bdf03","metadata":{"id":"dc9bdf03"},"source":["Let us try to find some facts in this dataset. For example, what is Harrison Ford's nationality? (\"harrison ford\" in the dataset)\n","\n","Write a function `harrison_ford_nationality` that takes a dataset and returns the nationality.\n","\n","_Hint: use `pandas.Series.str.contains` method_"]},{"cell_type":"code","execution_count":null,"id":"4e6bb702","metadata":{"id":"4e6bb702"},"outputs":[],"source":["def harrison_ford_nationality(df):\n","    res = df[(df.h ==  'harrison ford') & (df.r.str.contains('nationality'))].iloc[0]['t']\n","    return res"]},{"cell_type":"code","execution_count":null,"id":"4320c1f6","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":1161,"status":"ok","timestamp":1749631213332,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"4320c1f6","outputId":"3f73bf73-6096-495a-daf2-540413ab3b53"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'united states of america'"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["assert adler32(harrison_ford_nationality(df).encode()) == 1948191013\n","harrison_ford_nationality(df)"]},{"cell_type":"markdown","id":"473842ae","metadata":{"id":"473842ae"},"source":["More tricky question: who are film directors of movies where Harrison Ford was?\n","\n","Write a function `made_films_with_harrison_ford` that returns a set of directors' names."]},{"cell_type":"code","execution_count":null,"id":"2f0f48bf","metadata":{"id":"2f0f48bf"},"outputs":[],"source":["def made_films_with_harrison_ford(df):\n","    films = df[(df.h ==  'harrison ford') & (df.r.str.contains('/film/actor/film./film/performance/film'))]['t'].values\n","    directors = df[(df.t.isin(films)) & (df.r.str.contains('director'))]['h'].values\n","    return set(directors)"]},{"cell_type":"code","execution_count":null,"id":"57e619bd","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":746,"status":"ok","timestamp":1749631214074,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"57e619bd","outputId":"b79a65b0-f96d-4922-8e34-d3a38c2e8913"},"outputs":[{"data":{"text/plain":["{'francis ford coppola',\n"," 'george lucas',\n"," 'jon favreau filmography',\n"," 'kathryn bigelow',\n"," 'mike nichols',\n"," 'ridley scott',\n"," 'robert zemeckis',\n"," 'steven spielberg'}"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["directors = made_films_with_harrison_ford(df)\n","assert adler32(str(sorted(directors)).encode()) == 3798415057\n","directors"]},{"cell_type":"markdown","id":"2f3b3fcf","metadata":{"id":"2f3b3fcf"},"source":["### Task 2. Translation models (0.0 points)"]},{"cell_type":"markdown","id":"4b1fe0e9","metadata":{"id":"4b1fe0e9"},"source":["TransE (translations in the embedding space) is a method which models relationships by interpreting them as translations operating on the low-dimensional embeddings of the entities.\n","\n","Let us implement the model using TorchKGE — a Python module for knowledge graph embedding relying solely on Pytorch."]},{"cell_type":"code","execution_count":null,"id":"d59878ae","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11264,"status":"ok","timestamp":1749631324676,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"d59878ae","outputId":"f4afd1b8-99ca-45c0-d0ac-f7e66587873a"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m48.3/48.3 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m76.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m63.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m45.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m13.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m95.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}],"source":["!pip install torchkge==0.16.25 -q"]},{"cell_type":"code","execution_count":null,"id":"ca8a243b","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6318,"status":"ok","timestamp":1749631331003,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"ca8a243b","outputId":"60f7c1b9-0557-4289-82a1-bffae1edd0c3"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchkge/utils/data_redundancy.py:11: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n","  from tqdm.autonotebook import tqdm\n"]}],"source":["import torch\n","from torch import nn\n","import torch.nn.functional as F\n","from torchkge import KnowledgeGraph\n","from torchkge.utils import Trainer\n","from torchkge.evaluation import LinkPredictionEvaluator\n","from torchkge.models.interfaces import TranslationModel\n","from torch.nn.init import xavier_uniform_"]},{"cell_type":"markdown","id":"913de2fd","metadata":{"id":"913de2fd"},"source":["<img src='https://github.com/netspractice/ml-on-graphs/raw/main/assignment_knowledge_graph_embedding/kge.png' width=300>"]},{"cell_type":"markdown","id":"d24c0ca2","metadata":{"id":"d24c0ca2"},"source":["The basic idea behind the model is that the functional relation induced by the $r$-labeled edges corresponds to a translation of the embeddings, i.e. we want that $h + r \\approx t$ when ($h$, $r$, $t$) holds ($t$ should be a nearest neighbor of $h + r$), while $h + r$ should be far away from $t$ otherwise. Thereby, TransE scoring function is negative distance between $h+r$ and $t$\n","\n","$$f(h, r, t) = -||h + r - t||$$\n","\n","where $||\\cdot||$ is L1 or L2 norm. The goal of the optimization procedure is learning optimal embeddings, such that the scoring function is able to assign high scores to positive statements and low scores to statements unlikely to be true. The most common loss function is Margin Loss that can be represented as\n","\n","$$L = \\text{ReLU}\\left(\\gamma - f(h, r, t) + f(h', r, t')\\right)$$\n","\n","where $\\gamma > 0$ is a \"margin\" hyperparameter, the triplet $(h, r, t)$ is in a training set (positive) and the $(h', r, t')$ is in a set of *corrupted* (negative) triplets, that are composed of training triplets with either the head or tail replaced by a random entity (but not both at the same time)."]},{"cell_type":"markdown","id":"87808531","metadata":{"id":"87808531"},"source":["We will use TorchKGE TranslationModel as a base for TransE class, here are some auxiliary methods:\n","\n","* `normalize_parameters` applies `L2` normalization for training stability\n","* `get_embeddings` returns the tensors representing entities and relations\n","* `lp_prep_cands` gets entities and relations embeddings for link prediction training process\n","* `forward` returns scores for positive triplets (`h`, `r`, `t`) and negative triplets (`nh`, `r`, `nt`)"]},{"cell_type":"code","execution_count":null,"id":"7280f803","metadata":{"id":"7280f803"},"outputs":[],"source":["class BaseTransE(TranslationModel):\n","    def __init__(self, num_entities, num_relations, dim=100):\n","        super(BaseTransE, self).__init__(num_entities, num_relations, dissimilarity_type='L2')\n","        self.num_entities = num_entities\n","        self.num_relations = num_relations\n","        self.dim = dim\n","        self.ent_embeddings = nn.Embedding(num_entities, self.dim)\n","        self.rel_embeddings = nn.Embedding(num_relations, self.dim)\n","\n","    def normalize_parameters(self):\n","        self.ent_embeddings.weight.data = F.normalize(self.ent_embeddings.weight.data, p=2, dim=1)\n","\n","    def get_embeddings(self):\n","        self.normalize_parameters()\n","        return self.ent_embeddings.weight.data, self.rel_embeddings.weight.data\n","\n","    def lp_prep_cands(self, h_idx, t_idx, r_idx):\n","        b_size = h_idx.shape[0]\n","\n","        h_emb = self.ent_embeddings(h_idx)\n","        t_emb = self.ent_embeddings(t_idx)\n","        r_emb = self.rel_embeddings(r_idx)\n","\n","        candidates = self.ent_embeddings.weight.data.view(1, self.num_entities, self.dim)\n","        candidates = candidates.expand(b_size, self.num_entities, self.dim)\n","\n","        return h_emb, t_emb, candidates, r_emb\n","\n","    def forward(self, h, t, nh, nt, r):\n","        return self.scoring_function(h, t, r), self.scoring_function(nh, nt, r)"]},{"cell_type":"markdown","id":"ca3ee02b","metadata":{"id":"ca3ee02b"},"source":["Write a function `scoring_function` that takes a tensor `h`, `t`, `r` with triplets of the shape (number of triplets) and returns its L2 scores. For training stability, apply L2 normalization (`F.normalize`  with `p=2`) on entities embeddings before computing the scores. Note that `h`, `t`, `r` are tensors with integer IDs of entities and relations."]},{"cell_type":"code","execution_count":null,"id":"d0011822","metadata":{"id":"d0011822"},"outputs":[],"source":["class TransE(BaseTransE):\n","    def scoring_function(self, h, t, r):\n","        h_emb = self.ent_embeddings(h)\n","        t_emb = self.ent_embeddings(t)\n","        r_emb = self.rel_embeddings(r)\n","\n","        h_emb = F.normalize(h_emb, p=2, dim=1)\n","        t_emb = F.normalize(t_emb, p=2, dim=1)\n","\n","        return - torch.norm(h_emb + r_emb - t_emb, p=2, dim=1)"]},{"cell_type":"code","execution_count":null,"id":"fdd6e41d","metadata":{"id":"fdd6e41d"},"outputs":[],"source":["model = TransE(num_entities=5, num_relations=2, dim=2)\n","\n","h = torch.LongTensor([1, 1, 1])\n","r = torch.LongTensor([0, 1, 1])\n","t = torch.LongTensor([2, 2, 3])\n","\n","with torch.no_grad():\n","    scores = model.scoring_function(h, t, r).numpy()\n","assert scores.shape == (3, ) # 3 triplets"]},{"cell_type":"markdown","id":"1460dae6","metadata":{"id":"1460dae6"},"source":["Complete the class `MarginLoss` so that computes the losses among scores and returns an average loss. Positive and negative scores are tensors of the shape (number of triplets)."]},{"cell_type":"code","execution_count":null,"id":"6996f6b3","metadata":{"id":"6996f6b3"},"outputs":[],"source":["class MarginLoss(nn.Module):\n","    def __init__(self, margin):\n","        super().__init__()\n","        self.margin = margin\n","    def forward(self, positive_scores, negative_scores):\n","        return F.relu(self.margin - positive_scores + negative_scores).mean()"]},{"cell_type":"code","execution_count":null,"id":"1c789666","metadata":{"id":"1c789666"},"outputs":[],"source":["loss_fn = MarginLoss(margin=0.5)\n","torch.manual_seed(0)\n","positive_scores = torch.randn(8)\n","negative_scores = torch.randn(8)\n","loss = loss_fn(positive_scores, negative_scores)\n","assert loss.shape == torch.Size([])\n","assert round(loss.item(), 2) == 0.79"]},{"cell_type":"markdown","id":"40e66c15","metadata":{"id":"40e66c15"},"source":["Let us look at the WikiDataSet that presents country-specific subgraphs of Wikidata."]},{"cell_type":"code","execution_count":null,"id":"39f768ae","metadata":{"id":"39f768ae"},"outputs":[],"source":["url = 'https://raw.githubusercontent.com/netspractice/network-science/main/datasets/countries_edges.tsv'\n","open('countries_edges.tsv', 'wb').write(requests.get(url).content)\n","url = 'https://raw.githubusercontent.com/netspractice/network-science/main/datasets/countries_entities.tsv'\n","open('countries_entities.tsv', 'wb').write(requests.get(url).content)\n","url = 'https://raw.githubusercontent.com/netspractice/network-science/main/datasets/countries_relations.tsv'\n","open('countries_relations.tsv', 'wb').write(requests.get(url).content);"]},{"cell_type":"code","execution_count":null,"id":"6430aa5b","metadata":{"id":"6430aa5b"},"outputs":[],"source":["edges = pd.read_csv('countries_edges.tsv', sep='\\t').values\n","entity_labels = pd.read_csv('countries_entities.tsv', sep='\\t', index_col=0, engine='python').label.values\n","relation_labels = pd.read_csv('countries_relations.tsv', sep='\\t', index_col=0).label.values"]},{"cell_type":"code","execution_count":null,"id":"cac5db83","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":95,"status":"ok","timestamp":1749631332501,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"cac5db83","outputId":"cde243c3-1516-46c4-dfcf-7df853b97ec1"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 11361,\n  \"fields\": [\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1718,\n        \"samples\": [\n          \"Pakuan Pajajaran\",\n          \"Kingdom of Bulgaria\",\n          \"Kingdom of Burundi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"followed by\",\n          \"topic's main category\",\n          \"enclave within\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1168,\n        \"samples\": [\n          \"Kingdom of Brittany\",\n          \"Carantania\",\n          \"Kazakhstan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  <div id=\"df-b01ea6a8-4444-4a2b-a280-b785d6f3c519\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Belgium</td>\n","      <td>country</td>\n","      <td>Belgium</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Belgium</td>\n","      <td>diplomatic relation</td>\n","      <td>Luxembourg</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Belgium</td>\n","      <td>diplomatic relation</td>\n","      <td>Italy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Belgium</td>\n","      <td>diplomatic relation</td>\n","      <td>Germany</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Belgium</td>\n","      <td>diplomatic relation</td>\n","      <td>Liechtenstein</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b01ea6a8-4444-4a2b-a280-b785d6f3c519')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b01ea6a8-4444-4a2b-a280-b785d6f3c519 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b01ea6a8-4444-4a2b-a280-b785d6f3c519');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8322f824-406d-4f08-b632-77137a14deaf\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8322f824-406d-4f08-b632-77137a14deaf')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8322f824-406d-4f08-b632-77137a14deaf button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"text/plain":["         h                    r              t\n","0  Belgium              country        Belgium\n","1  Belgium  diplomatic relation     Luxembourg\n","2  Belgium  diplomatic relation          Italy\n","3  Belgium  diplomatic relation        Germany\n","4  Belgium  diplomatic relation  Liechtenstein"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["edges_labeled = np.stack([entity_labels[edges[:, 0]],\n","                          entity_labels[edges[:, 1]],\n","                          relation_labels[edges[:, 2]]], axis=1)\n","\n","df = pd.DataFrame(edges_labeled, columns=['h', 't', 'r'])[['h', 'r', 't']]\n","df.head()"]},{"cell_type":"markdown","id":"96e03f08","metadata":{"id":"96e03f08"},"source":["Here are unique relations with the number of triplets"]},{"cell_type":"code","execution_count":null,"id":"1d4ef2bd","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":60,"status":"ok","timestamp":1749631332574,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"1d4ef2bd","outputId":"cdf7c250-7eab-4519-c581-5a3a198db5d0"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>r</th>\n","    </tr>\n","    <tr>\n","      <th>r</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>applies to jurisdiction</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>basic form of government</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>biological process</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>capital</th>\n","      <td>34</td>\n","    </tr>\n","    <tr>\n","      <th>capital of</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>contains administrative territorial entity</th>\n","      <td>94</td>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <td>1339</td>\n","    </tr>\n","    <tr>\n","      <th>country of citizenship</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>country of origin</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>culture</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>designated as terrorist by</th>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>different from</th>\n","      <td>113</td>\n","    </tr>\n","    <tr>\n","      <th>diplomatic relation</th>\n","      <td>6145</td>\n","    </tr>\n","    <tr>\n","      <th>enclave within</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>facet of</th>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>family</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>followed by</th>\n","      <td>332</td>\n","    </tr>\n","    <tr>\n","      <th>follows</th>\n","      <td>316</td>\n","    </tr>\n","    <tr>\n","      <th>founded by</th>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>has contributing factor</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>has part</th>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>headquarters location</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>history of topic</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>instance of</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>located in present-day administrative territorial entity</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>located in the administrative territorial entity</th>\n","      <td>212</td>\n","    </tr>\n","    <tr>\n","      <th>located on terrain feature</th>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>location</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>location of formation</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>member of</th>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>merged into</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>named after</th>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>opposite of</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>owned by</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>part of</th>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>partially coincident with</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>permanent duplicated item</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>replaced by</th>\n","      <td>462</td>\n","    </tr>\n","    <tr>\n","      <th>replaces</th>\n","      <td>414</td>\n","    </tr>\n","    <tr>\n","      <th>said to be the same as</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>separated from</th>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>shares border with</th>\n","      <td>1395</td>\n","    </tr>\n","    <tr>\n","      <th>significant event</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>subclass of</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>territory claimed by</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>territory overlaps</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>time period</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>topic's main category</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>twinned administrative body</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"],"text/plain":["r\n","applies to jurisdiction                                        1\n","basic form of government                                       3\n","biological process                                             1\n","capital                                                       34\n","capital of                                                    25\n","contains administrative territorial entity                    94\n","country                                                     1339\n","country of citizenship                                         5\n","country of origin                                              1\n","culture                                                        3\n","designated as terrorist by                                     9\n","different from                                               113\n","diplomatic relation                                         6145\n","enclave within                                                 3\n","facet of                                                      13\n","family                                                         1\n","followed by                                                  332\n","follows                                                      316\n","founded by                                                    11\n","has contributing factor                                        1\n","has part                                                     121\n","headquarters location                                          8\n","history of topic                                               2\n","instance of                                                   18\n","located in present-day administrative territorial entity       7\n","located in the administrative territorial entity             212\n","located on terrain feature                                    13\n","location                                                       5\n","location of formation                                          1\n","member of                                                     36\n","merged into                                                    3\n","named after                                                   14\n","opposite of                                                    2\n","owned by                                                       2\n","part of                                                      121\n","partially coincident with                                      4\n","permanent duplicated item                                      2\n","replaced by                                                  462\n","replaces                                                     414\n","said to be the same as                                         8\n","separated from                                                15\n","shares border with                                          1395\n","significant event                                              6\n","subclass of                                                    6\n","territory claimed by                                          18\n","territory overlaps                                             4\n","time period                                                    8\n","topic's main category                                          2\n","twinned administrative body                                    2\n","Name: r, dtype: int64"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["df.r.groupby(df.r).count()"]},{"cell_type":"markdown","id":"767c8128","metadata":{"id":"767c8128"},"source":["Convert our dataset into a TorchKGE knowledge graph"]},{"cell_type":"code","execution_count":null,"id":"e315fd6c","metadata":{"id":"e315fd6c"},"outputs":[],"source":["kg = KnowledgeGraph(\n","    pd.DataFrame(edges_labeled, columns=['from', 'to', 'rel']))"]},{"cell_type":"code","execution_count":null,"id":"sUipZ_v2ttQt","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1749631333107,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"sUipZ_v2ttQt","outputId":"6b92caf7-dfd0-45b6-c687-778f4c0263ea"},"outputs":[{"data":{"text/plain":["<torchkge.data_structures.KnowledgeGraph at 0x7839073954d0>"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["kg"]},{"cell_type":"markdown","id":"7cd9ac15","metadata":{"id":"7cd9ac15"},"source":["Split the dataset into train and test set. What differs from the standard method of randomly sampling N points to make up our test set, is that our data points are two entities linked by some relationship, and we need to take care to ensure that all entities are represented in train and test sets by at least one triple.\n","\n"]},{"cell_type":"code","execution_count":null,"id":"86485e1b","metadata":{"id":"86485e1b"},"outputs":[],"source":["kg_train, kg_test = kg.split_kg()"]},{"cell_type":"markdown","id":"45027cae","metadata":{"id":"45027cae"},"source":["Create required objects: model, loss, optimizer and trainer."]},{"cell_type":"code","execution_count":null,"id":"949a0024","metadata":{"id":"949a0024"},"outputs":[],"source":["model = TransE(kg_train.n_ent, kg_train.n_rel, dim=64)\n","criterion = MarginLoss(margin=0.5)\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.005)\n","\n","trainer = Trainer(\n","    model, criterion, kg_train, n_epochs=500,\n","    batch_size=2048, optimizer=optimizer)"]},{"cell_type":"markdown","id":"ddd51ca4","metadata":{"id":"ddd51ca4"},"source":["During training, positive triplets are selected, negative triplets are generated, margin loss is calculated and then the gradient step is performed."]},{"cell_type":"code","execution_count":null,"id":"26513e9f","metadata":{"id":"26513e9f"},"outputs":[],"source":["trainer.run()"]},{"cell_type":"markdown","id":"b27a7911","metadata":{"id":"b27a7911"},"source":["Let us evaluate our model on the link prediction task"]},{"cell_type":"code","execution_count":null,"id":"ba2026aa","metadata":{"id":"ba2026aa"},"outputs":[],"source":["evaluator = LinkPredictionEvaluator(model, kg_test)\n","evaluator.evaluate(b_size=128)\n","\n","assert evaluator.hit_at_k(k=10)[0] > 0.3\n","assert evaluator.mean_rank()[0] < 70\n","assert evaluator.mrr()[0] > 0.1"]},{"cell_type":"code","execution_count":null,"id":"ba1f7516","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1749631378458,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"ba1f7516","outputId":"c91541fd-4d7a-4e93-f0f0-e2df29528005"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hit@10: 0.3328\n","Mean Rank: 66.9751\n","MRR: 0.1408\n"]}],"source":["print('Hit@10: {:.4f}'.format(evaluator.hit_at_k(k=10)[0]))\n","print('Mean Rank: {:.4f}'.format(evaluator.mean_rank()[0]))\n","print('MRR: {:.4f}'.format(evaluator.mrr()[0]))"]},{"cell_type":"markdown","id":"4c2ce4e5","metadata":{"id":"4c2ce4e5"},"source":["`Hit@k` indicates how many times in average a true triple was ranked in the top-k.\n","\n","`Mean Rank` is a mean rank of the true entity when replacing alternatively head and tail in any fact of the dataset.\n","\n","`MRR` is an average of mean recovery rank for head and tail replacement."]},{"cell_type":"markdown","id":"bde3101e","metadata":{"id":"bde3101e"},"source":["### Task 3. Entity embeddings (2.5 points)"]},{"cell_type":"code","execution_count":null,"id":"a0fc34f6","metadata":{"id":"a0fc34f6"},"outputs":[],"source":["from sklearn.decomposition import TruncatedSVD\n","from sklearn.cluster import k_means\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","id":"5433cf80","metadata":{"id":"5433cf80"},"source":["Similarly to node embedding visualization, we can plot 2D embeddings of entities of knowledge graph.\n","\n","Write a function `ent_embeddgins` that takes the model, transforms entity embeddings into 2-dimenstional space via SVD, then finds 2 clusters via k-means and finally returns a tuple: np.array with embeddings and 0/1 labels of clusters."]},{"cell_type":"code","execution_count":null,"id":"lBuWUl1TAzhg","metadata":{"id":"lBuWUl1TAzhg"},"outputs":[],"source":["model"]},{"cell_type":"code","execution_count":null,"id":"dbc9b605","metadata":{"id":"dbc9b605"},"outputs":[],"source":["def ent_embeddgins(model):\n","    ent_embeddgins, rel_embeddings = model.get_embeddings()\n","    svd = TruncatedSVD(n_components=2)\n","    ent_embeddgins_reduced = svd.fit_transform(ent_embeddgins)\n","    centroids, labels, inertia = k_means(ent_embeddgins_reduced, n_clusters=2)\n","    return ent_embeddgins_reduced, labels"]},{"cell_type":"code","execution_count":null,"id":"6cbae81a","metadata":{"id":"6cbae81a"},"outputs":[],"source":["ent_emb, labels = ent_embeddgins(model)\n","assert ent_emb.shape == (1810, 2)\n","assert labels.shape == (1810,)\n","n_label1 = (labels == 1).sum()\n","n_label0 = (labels == 0).sum()\n","assert 0.14 < min(n_label1, n_label0) / max(n_label1, n_label0) < 0.18"]},{"cell_type":"code","execution_count":null,"id":"7fe88cd5","metadata":{"colab":{"background_save":true},"id":"7fe88cd5","outputId":"09d17bc7-040a-4d62-965e-b33ba193ac0e"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 800x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.figure(figsize=(8, 5))\n","colors = np.array(plt.cm.tab10.colors)\n","plt.scatter(ent_emb[:, 0], ent_emb[:, 1], s=10, c=colors[labels])\n","plt.title('Entity embeddings')\n","plt.show()"]},{"cell_type":"markdown","id":"595b2ba3","metadata":{"id":"595b2ba3"},"source":["Let us look at some randomly chosen entities from each cluster. Here we use `kg.ent2ix` dictionary to get labels of entities."]},{"cell_type":"code","execution_count":null,"id":"6b09c78c","metadata":{"colab":{"background_save":true},"id":"6b09c78c","outputId":"68694373-84a2-465a-f23f-e804d2dde8ea"},"outputs":[{"name":"stdout","output_type":"stream","text":["First cluster:  State of the Teutonic Order, Free Territory, German colonial empire, Sasanian Empire, Middle Francia, Kingdom of Bernicia, Western Chalukya Empire, Cape Colony, Kalinyamat Sultanate, Zjednoczone Królestwo Polskie\n","\n","Second cluster:  Israel, Suriname, Lesotho, Croatia, Kingdom of Hawaiʻi, Equatorial Guinea, Tsardom of Russia, South Sudan, Northern Ireland, Germany\n"]}],"source":["ent_labels = np.array(list(kg.ent2ix.keys()))\n","print('First cluster: ', ', '.join(\n","    np.random.permutation(ent_labels[labels == 0])[:10]))\n","print()\n","print('Second cluster: ', ', '.join(\n","    np.random.permutation(ent_labels[labels == 1])[:10]))"]},{"cell_type":"markdown","id":"b3f72802","metadata":{"id":"b3f72802"},"source":["### Task 4. Nearest neighbors of entities (2.5 points)"]},{"cell_type":"code","execution_count":null,"id":"669adc04","metadata":{"colab":{"background_save":true},"id":"669adc04"},"outputs":[],"source":["from sklearn.neighbors import NearestNeighbors"]},{"cell_type":"markdown","id":"e07bdbf6","metadata":{"id":"e07bdbf6"},"source":["Let us find a nearest neighbors of Belgium using embedding space.\n","\n","Write a function `similar_countries` that takes a name of country, graph and model and returns a list with names of nearest countries. Use `model.get_embeddings()`."]},{"cell_type":"code","execution_count":null,"id":"91d490c5","metadata":{"colab":{"background_save":true},"id":"91d490c5"},"outputs":[],"source":["def similar_countries(name, kg, model):\n","    dict_ind = kg.ent2ix\n","    inv_dict_ind = {v: k for k, v in dict_ind.items()}\n","    ent_embeddgins, rel_embeddings = model.get_embeddings()\n","\n","    knn = NearestNeighbors(n_neighbors=5)\n","    knn.fit(ent_embeddgins)\n","\n","    distances, indices = knn.kneighbors([ent_embeddgins[dict_ind[name]]])\n","\n","    return [inv_dict_ind[i] for i in indices[0]]"]},{"cell_type":"code","execution_count":null,"id":"dee374e6","metadata":{"colab":{"background_save":true},"id":"dee374e6","outputId":"428997e4-f40a-46cd-b852-8a010d1716f0"},"outputs":[{"data":{"text/plain":["['Belgium',\n"," 'Netherlands',\n"," 'Luxembourg',\n"," 'France',\n"," 'Kingdom of the Netherlands']"]},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":["similar = similar_countries('Belgium', kg, model)\n","assert 'Netherlands' in similar\n","similar"]},{"cell_type":"markdown","id":"302bace9","metadata":{"id":"302bace9"},"source":["### Task 5. Relation prediction (2.5 points)"]},{"cell_type":"markdown","id":"8bcd2c29","metadata":{"id":"8bcd2c29"},"source":["Let us consider these facts:\n","1. Belgium shares border with France\n","2. Belgium shares border with Switzerland\n","3. Belgium shares border with Nigeria\n","\n","Only the fact 1 is truth, but it seems that the fact 2 is more likely than 3."]},{"cell_type":"code","execution_count":null,"id":"5ed79917","metadata":{"colab":{"background_save":true},"id":"5ed79917","outputId":"1ea3d39b-9a8c-49dd-eae1-de3a3a49213a"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df[(df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"shares border with\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"France\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-2cda31c7-3a1e-47bc-b642-81f339fd3ac2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>8</th>\n","      <td>Belgium</td>\n","      <td>diplomatic relation</td>\n","      <td>France</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>Belgium</td>\n","      <td>shares border with</td>\n","      <td>France</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cda31c7-3a1e-47bc-b642-81f339fd3ac2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2cda31c7-3a1e-47bc-b642-81f339fd3ac2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2cda31c7-3a1e-47bc-b642-81f339fd3ac2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-97bfba4a-4eee-49a9-9da2-c074d8e24868\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97bfba4a-4eee-49a9-9da2-c074d8e24868')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-97bfba4a-4eee-49a9-9da2-c074d8e24868 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"text/plain":["          h                    r       t\n","8   Belgium  diplomatic relation  France\n","32  Belgium   shares border with  France"]},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":["df[(df.h == 'Belgium') & (df.t == 'France')]"]},{"cell_type":"code","execution_count":null,"id":"52a2002d","metadata":{"colab":{"background_save":true},"id":"52a2002d","outputId":"ca1d7e45-f56f-4969-c9cb-f7d6f10eb3c6"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"repr_error":"Out of range float values are not JSON compliant: nan","type":"dataframe"},"text/html":["\n","  <div id=\"df-65282d7d-e007-4fed-84f5-d742a30860b5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65282d7d-e007-4fed-84f5-d742a30860b5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-65282d7d-e007-4fed-84f5-d742a30860b5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-65282d7d-e007-4fed-84f5-d742a30860b5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["Empty DataFrame\n","Columns: [h, r, t]\n","Index: []"]},"execution_count":42,"metadata":{},"output_type":"execute_result"}],"source":["df[(df.h == 'Belgium') & (df.t == 'Switzerland')]"]},{"cell_type":"code","execution_count":null,"id":"5c5a6e01","metadata":{"colab":{"background_save":true},"id":"5c5a6e01","outputId":"d1befc50-84b0-4b3f-e709-b095eb590e41"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"repr_error":"Out of range float values are not JSON compliant: nan","type":"dataframe"},"text/html":["\n","  <div id=\"df-9ff00e4e-93ec-41b0-8ca4-41c5ba0e346b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>h</th>\n","      <th>r</th>\n","      <th>t</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ff00e4e-93ec-41b0-8ca4-41c5ba0e346b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9ff00e4e-93ec-41b0-8ca4-41c5ba0e346b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9ff00e4e-93ec-41b0-8ca4-41c5ba0e346b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["Empty DataFrame\n","Columns: [h, r, t]\n","Index: []"]},"execution_count":43,"metadata":{},"output_type":"execute_result"}],"source":["df[(df.h == 'Belgium') & (df.t == 'Nigeria')]"]},{"cell_type":"markdown","id":"e2e80719","metadata":{"id":"e2e80719"},"source":["Now we can compare these facts using scoring function of TransE model to check our prior knowledge.\n","\n","Write a function `belgium_facts` that takes a model, a graph and returns 3 values of scoring function for each fact. Use `model.scoring_function` with `torch.no_grad()`."]},{"cell_type":"code","execution_count":null,"id":"6e484ea3","metadata":{"id":"6e484ea3"},"outputs":[],"source":["def belgium_facts(model, kg):\n","    facts = [\n","        (\"Belgium\", \"diplomatic relation\", \"France\"),\n","        (\"Belgium\", \"diplomatic relation\", \"Switzerland\"),\n","        (\"Belgium\", \"diplomatic relation\", \"Nigeria\")\n","    ]\n","\n","    scores = []\n","    with torch.no_grad():\n","        for head, rel, tail in facts:\n","            h = torch.tensor([kg.ent2ix[head]])\n","            r = torch.tensor([kg.rel2ix[rel]])\n","            t = torch.tensor([kg.ent2ix[tail]])\n","\n","            score = model.scoring_function(h, t, r)\n","            scores.append(score.item())\n","\n","    return tuple(scores)"]},{"cell_type":"code","execution_count":null,"id":"0c73a43b","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":0,"status":"ok","timestamp":1749631380876,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"0c73a43b","outputId":"da874d89-afa2-4789-a923-33a926d6f8c8"},"outputs":[{"data":{"text/plain":["(-0.606495201587677, -0.6766581535339355, -1.0360527038574219)"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["scores = belgium_facts(model, kg)\n","assert scores[0] > scores[1] > scores[2]\n","scores"]},{"cell_type":"markdown","id":"2214fc87","metadata":{"id":"2214fc87"},"source":["### Task 6. Tail prediction (2.5 points)"]},{"cell_type":"code","execution_count":null,"id":"1feb4bc5","metadata":{"id":"1feb4bc5"},"outputs":[],"source":["from sklearn.neighbors import NearestNeighbors"]},{"cell_type":"markdown","id":"eb36ce98","metadata":{"id":"eb36ce98"},"source":["Recall that the main idea of TransE is to learn $h + r \\approx t$, so let us find the closest tails for the head + relation pair.\n","\n","Write a function `soviet_tail` that takes a model, graph and finds 5 nearest neighbors for the pair $h$ is \"Soviet Union\" and $r$ is \"founded by\"."]},{"cell_type":"code","execution_count":null,"id":"c6f4633a","metadata":{"id":"c6f4633a"},"outputs":[],"source":["def soviet_tail(model, kg, k=5):\n","    h_idx = kg.ent2ix[\"Soviet Union\"]\n","    r_idx = kg.rel2ix[\"founded by\"]\n","\n","    h_emb = model.ent_embeddings(torch.tensor([h_idx]))\n","    r_emb = model.rel_embeddings(torch.tensor([r_idx]))\n","    h_emb = F.normalize(h_emb, p=2, dim=1)\n","    target = (h_emb + r_emb).detach().numpy()\n","\n","    all_entity_embs = F.normalize(model.ent_embeddings.weight, p=2, dim=1)\n","    all_entity_embs_np = all_entity_embs.detach().numpy()\n","\n","    knn = NearestNeighbors(n_neighbors=k).fit(all_entity_embs_np)\n","\n","    distances, indices = knn.kneighbors(target, return_distance=True)\n","\n","    ix2ent = {v: k for k, v in kg.ent2ix.items()}\n","    return [ix2ent[i] for i in indices[0]]"]},{"cell_type":"code","execution_count":null,"id":"d8d5ab86","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":0,"status":"ok","timestamp":1749631380879,"user":{"displayName":"Александр Дорош","userId":"00867939589235916416"},"user_tz":-180},"id":"d8d5ab86","outputId":"45198fbb-1df7-4016-e2f4-40a0c13ad35c"},"outputs":[{"data":{"text/plain":["['Russian Empire',\n"," 'Soviet Union',\n"," 'Transcaucasian Socialist Federative Soviet Republic',\n"," 'Russian Soviet Federative Socialist Republic',\n"," 'Russian Republic']"]},"execution_count":48,"metadata":{},"output_type":"execute_result"}],"source":["tails = soviet_tail(model, kg)\n","assert 'Russian Soviet Federative Socialist Republic' in tails\n","tails"]},{"cell_type":"code","execution_count":null,"id":"1b59dd3a","metadata":{"id":"1b59dd3a"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1c0Z1cH2WmrWqzOUz0po1I5UX7ji--3Qy","timestamp":1749460094383}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"}},"nbformat":4,"nbformat_minor":5}